/**********************************************************************************************************************************************************
 * SendEvery
 * ---------
 *
 * 2021-09-05
 *
 * Sends an Event every period.
 *
 * Roy Davies, Smart Digital Lab, University of Auckland.
 **********************************************************************************************************************************************************/

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// Public functions
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
public interface _SendEvery
{
    void Go();
    void Stop();
}
// ----------------------------------------------------------------------------------------------------------------------------------------------------------



// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// Main class
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
[AddComponentMenu("OpenXR UX/Connectors/SendEvery")]
public class SendEvery : MonoBehaviour, _SendEvery
{
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    // Public variables
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    [Header("____________________________________________________________________________________________________")]
    [Header("Send an event regularly.\n____________________________________________________________________________________________________")]
    [Header("INPUTS\n\n - Go() - Start sending.\n - Stop() - Stop sending.")]

    [Header("____________________________________________________________________________________________________")]
    [Header("SETTINGS")]
    [Header("Time period in seconds.")]
    public float timeInSeconds = 1.0f;

    [Header("____________________________________________________________________________________________________")]
    [Header("OUTPUTS")]
    public UnityXRDataEvent onChange;
    // ------------------------------------------------------------------------------------------------------------------------------------------------------



    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    // Private variables
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    private float lastTime; // Time when last activated.
    private bool running = true;
    // ------------------------------------------------------------------------------------------------------------------------------------------------------



    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    // It is possible that a button may be touched but the system misses the OnTriggerExit event, and it stays touched.  Therefore, after a small amount of
    // time after the last OnTriggerStay, take the button back to the Up state.
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    void Update()
    {
        if ((Time.time - lastTime) > timeInSeconds)
        {
            if ((onChange != null) && running) onChange.Invoke(new XRData(true));
            lastTime = Time.time;
        }
    }
    // ------------------------------------------------------------------------------------------------------------------------------------------------------



    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    void Start()
    {
        lastTime = Time.time;
    }
    // ------------------------------------------------------------------------------------------------------------------------------------------------------



    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    // Start and Stop the function
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
    public void Go()
    {
        running = true;
    }
    public void Stop()
    {
        running = false;
    }
    // ------------------------------------------------------------------------------------------------------------------------------------------------------
}
